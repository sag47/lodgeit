#!/usr/bin/env python
'''dpaste - a cli frontend for the LodgeIt pastebin'''

##########################################################################
# Drexel University dpaste description for LodgeIt pastebin
##########################################################################
# fpaste Modified by Sam Gleske (sag47 [at] drexel.edu)
# Copyright 2013 Drexel University
#
# dpaste is fpaste for LodgeIt pastebin.  Modified fpaste to work with 
# Lodgeit pastebin; Drexel's private pastebin.  dpaste utilizes the JSON
# API in LodgeIt unlike lodgeit.py (which uses the XMLRPC API).
#
# Tested Environment
#   Ubuntu 12.04.2 LTS
#   Linux 3.2.0-38-generic x86_64 GNU/Linux
#   Python 2.7.3
# 
##########################################################################

##########################################################################
# Original Fedora fpaste description
##########################################################################
#
# Copyright 2008, 2010 Fedora Unity Project (http://fedoraunity.org)
# Author: Jason 'zcat' Farrell <farrellj@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
##########################################################################

VERSION = '0.1.8'
USER_AGENT = 'dpaste/' + VERSION
DPASTE_URL = 'http://localhost:5000/'

import os, sys, urllib, urllib2, subprocess, json
from optparse import OptionParser, OptionGroup, SUPPRESS_HELP
from datetime import datetime


def is_text(text, maxCheck = 100, pctPrintable = 0.75):
    '''returns true if maxCheck evenly distributed chars in text are >= pctPrintable% text chars'''
    # e.g.: /bin/* ranges between 19% and 42% printable
    from string import printable
    nchars = len(text)
    if nchars == 0:
        return False
    ncheck = min(nchars, maxCheck)
    inc = float(nchars)/ncheck
    i = 0.0
    nprintable = 0
    while i < nchars:
        if text[int(i)] in printable:
            nprintable += 1
        i += inc
    pct = float(nprintable) / ncheck
    return (pct >= pctPrintable)

def confirm(prompt = "OK?"):
    '''prompt user for yes/no input and return True or False'''
    prompt += " [y/N]: "
    try:
        ans = raw_input(prompt)
    except EOFError:    # already read sys.stdin and hit EOF
        # rebind sys.stdin to user tty (unix-only)
        try:
            mytty = os.ttyname(sys.stdout.fileno())
            sys.stdin = open(mytty)
            ans = raw_input()
        except:
            print >> sys.stderr, "could not rebind sys.stdin to %s after sys.stdin EOF" % mytty
            return False

    if ans.lower().startswith("y"):
        return True
    else:
        return False


def paste(text, options):
    '''send text to LodgeIt and return the URL'''
    if not text:
        print >> sys.stderr, "No text to send."
        return False

    #text.decode is to account for Unicode
    params = json.dumps({'language': options.lang, 'code': text.decode("cp1252", "ignore"), 'private': options.private})
    pasteSizeKiB = len(params)/1024.0

    if pasteSizeKiB >= 512:   # 512KiB appears to be the current hard limit (20110404); old limit was 16MiB
        print >> sys.stderr, "WARNING: your paste size (%.1fKiB) is very large and may be rejected by the server. A pastebin is NOT a file hosting service!" % (pasteSizeKiB)
    # verify that it's most likely *non-binary* data being sent.
    if not is_text(text):
        print >> sys.stderr, "WARNING: your paste looks a lot like binary data instead of text."
        if not confirm("Send binary data anyway?"):
            return False

    req = urllib2.Request(url=DPASTE_URL+'json/?method=pastes.newPaste', data=params, headers={'User-agent': USER_AGENT,'Content-Type': 'application/json'})
    if options.proxy:
        if options.debug:
            print >> sys.stderr, "Using proxy: %s" % options.proxy
        req.set_proxy(options.proxy, 'http')

    print >> sys.stderr, "Uploading (%.1fKiB)..." % pasteSizeKiB

    try:
        f = urllib2.urlopen(req)
    except urllib2.URLError, e: 
        if hasattr(e, 'reason'):
            print >> sys.stderr, "Error Uploading: %s" % e.reason
        elif hasattr(e, 'code'):
            print >> sys.stderr, "Server Error: %d - %s" % (e.code, e.msg)
            if options.debug:
                print f.read()
        return False

    url = json.loads(f.read())
    if url["error"] == None:
        return DPASTE_URL+'show/'+url["data"]+'/'
    else:
        print >> sys.stderr, "API Error: %s" % url["error"]
        if options.debug:
            print f.read()
        return False

def sysinfo(show_stderr = False, show_successful_cmds = True, show_failed_cmds = True):
    '''returns commonly requested (and some fedora-specific) system info'''
    # 'ps' output below has been anonymized: -n for uid vs username, and -c for short processname

    # cmd name, command, command2 fallback, command3 fallback, ...
    cmdlist = [
        ('OS Release',         '''lsb_release -ds''', '''cat /etc/*-release | uniq''', 'cat /etc/issue', 'cat /etc/motd'),
        ('Kernel',             '''uname -r ; cat /proc/cmdline'''),
        ('Desktop(s) Running', '''ps -eo comm= | egrep '(gnome-session|kdeinit|xfce.?-session|fluxbox|blackbox|hackedbox|ratpoison|enlightenment|icewm-session|od-session|wmaker|wmx|openbox-lxde|openbox-gnome-session|openbox-kde-session|mwm|e16|fvwm|xmonad|sugar-session)' '''),
        ('Desktop(s) Installed', '''ls -m /usr/share/xsessions/ | sed 's/\.desktop//g' '''),
        ('SELinux Status',      '''sestatus''', '''/usr/sbin/sestatus''', '''getenforce''', '''grep -v '^#' /etc/sysconfig/selinux'''),
        ('SELinux Error Count', '''selinuxenabled && (grep avc: /var/log/messages; ausearch -m avc -ts today)2>/dev/null|egrep -o "comm=\\"[^ ]+"|sort|uniq -c|sort -rn'''),
        ('CPU Model',          '''grep 'model name' /proc/cpuinfo | awk -F: '{print $2}' | uniq -c | sed -re 's/^ +//' ''', '''grep 'model name' /proc/cpuinfo'''),
        ('64-bit Support',     '''grep -q ' lm ' /proc/cpuinfo && echo Yes || echo No'''),
        ('Hardware Virtualization Support', '''egrep -q '(vmx|svm)' /proc/cpuinfo && echo Yes || echo No'''),
        ('Load average',       '''uptime'''),
        ('Memory usage',       '''free -m''', 'free'),
        #('Top',                '''top -n1 -b | head -15'''),
        ('Top 5 CPU hogs',     '''ps axuScnh | awk '$2!=''' + str(os.getpid()) + '''' | sort -rnk3 | head -5'''),
        ('Top 5 Memory hogs',  '''ps axuScnh | sort -rnk4 | head -5'''),
        ('Disk space usage',   '''df -hT''', 'df -h', 'df'),
        ('Block devices',      '''blkid''', '''/sbin/blkid'''),
        ('PCI devices',        '''lspci''', '''/sbin/lspci'''),
        ('USB devices',        '''lsusb''', '''/sbin/lsusb'''),
        ('DRM Information',    '''grep drm /var/log/dmesg'''),
        ('Xorg modules',       '''grep LoadModule /var/log/Xorg.0.log | cut -d \\" -f 2 | xargs'''),
        ('GL Support',         '''glxinfo | egrep "OpenGL version|OpenGL renderer"'''),
        ('Xorg errors',        '''grep '^\[.*(EE)' /var/log/Xorg.0.log'''),
        ('Kernel buffer tail', '''dmesg | tail'''),
        ('Last few reboots',   '''last -x -n10 reboot runlevel'''),
        ('YUM Repositories',   '''yum -C repolist''', '''ls -l /etc/yum.repos.d''', '''grep -v '^#' /etc/yum.conf'''),
        ('YUM Extras',         '''yum -C list extras'''),
        ('Last 20 packages installed', '''rpm -qa --nodigest --nosignature --last | head -20''')]
        #('Installed packages', '''rpm -qa --nodigest --nosignature | sort''', '''dpkg -l''') ]
    si = []

    print >> sys.stderr, "Gathering system info",
    for cmds in cmdlist:
        cmdname = cmds[0]
        cmd = ""
        for cmd in cmds[1:]:
            sys.stderr.write('.') # simple progress feedback
            p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            (out, err) = p.communicate()
            if p.returncode == 0 and out:
                break
            else:
                if show_stderr:
                    print >> sys.stderr, "sysinfo Error: the cmd \"%s\" returned %d with stderr: %s" % (cmd, p.returncode, err)
                    print >> sys.stderr, "Trying next fallback cmd..."
        if out:
            if show_successful_cmds:
                si.append( ('%s (%s)' % (cmdname, cmd), out) )
            else:
                si.append( ('%s' % cmdname, out) )
        else:
            if show_failed_cmds:
                si.append( ('%s (failed: "%s")' % (cmdname, '" AND "'.join(cmds[1:])), out) )
            else:
                si.append( ('%s' % cmdname, out) )

    sys.stderr.write("\n")

    # return in readable indented format
    sistr = "=== dpaste %s System Information (dpaste --sysinfo) ===\n" % VERSION
    for cmdname, output in si:
        sistr += "* %s:\n" % cmdname
        if not output:
            sistr += "     N/A\n\n"
        else:
            for line in output.split('\n'):
                sistr += "     %s\n" % line

    return sistr


def generate_man_page():
    '''TODO: generate man page from usage'''
    pass


def summarize_text(text):
    # use beginning/middle/end content snippets as a description summary. 120 char limit
    # "36chars ... 36chars ... 36chars" == 118 chars
    # TODO: nuking whitespace in huge text files might be expensive; optimize for b/m/e segments only
    sniplen = 36
    seplen = len(" ... ")
    tsum = ""
    text = " ".join(text.split())   # nuke whitespace
    tlen = len(text)

    if tlen < sniplen+seplen:
        tsum += text
    if tlen >= sniplen+seplen:
        tsum += text[0:sniplen] + " ..."
    if tlen >= (sniplen*2)+seplen:
        tsum += " " + text[tlen/2-(sniplen/2):(tlen/2)+(sniplen/2)] + " ..."
    if tlen >= (sniplen*3)+(seplen*2):
        tsum += " " + text[-sniplen:]
    #print >> sys.stderr, str(len(tsum)) + ": " + tsum

    return tsum


def print_languages(extended = False):
    """Return a list of all supported languages, with description if extended=True."""
    req = urllib2.Request(url=DPASTE_URL+'json/?method=pastes.getLanguages', data='', headers={'User-agent': USER_AGENT})
    try:
        f = urllib2.urlopen(req)
    except urllib2.URLError, e: 
        if hasattr(e, 'reason'):
            print >> sys.stderr, "Error getting language list: %s" % e.reason
        elif hasattr(e, 'code'):
            print >> sys.stderr, "Server Error: %d - %s" % (e.code, e.msg)
            if options.debug:
                print f.read()
        return False

    url = json.loads(f.read())
    languages={}
    for key in url["data"].keys():
        if len(key) > 0:
            key=str(key)
            languages[key] = str(url["data"][key])
    if extended:
        longlist = [] 
        for key in languages.keys():
            longlist.append((key,languages[key]))
        return longlist
    else:
        return languages.keys()


def print_paste(data):
    print '    %-30s%s' % ("Paste ID:", str(data["paste_id"]))
    print '    %-30s%s' % ("Parent ID:", str(data["parent_id"]))
    print '    %-30s%s' % ("Language:", str(data["language"]))
    print '    %-30s%s' % ("Publish Date:", datetime.fromtimestamp(data["pub_date"]).strftime('%a %b %d %H:%M:%S %Z %Y'))
    print "Summary:\n%s" % summarize_text(data["code"])


def get_last_paste(options):
    req = urllib2.Request(url=DPASTE_URL+'json/?method=pastes.getLast', data='', headers={'User-agent': USER_AGENT})
    if options.proxy:
        if options.debug:
            print >> sys.stderr, "Using proxy: %s" % options.proxy
        req.set_proxy(options.proxy, 'http')

    try:
        f = urllib2.urlopen(req)
    except urllib2.URLError, e: 
        if hasattr(e, 'reason'):
            print >> sys.stderr, "Error Getting Paste: %s" % e.reason
        elif hasattr(e, 'code'):
            print >> sys.stderr, "Server Error: %d - %s" % (e.code, e.msg)
            if options.debug:
                print f.read()
        return False

    url = json.loads(f.read())
    if url["error"] == None:
        print "Most recent public paste"
        print '#'*50
        print_paste(url["data"])
        print '#'*50
    else:
        print >> sys.stderr, "API Error: %s" % url["error"]
        if options.debug:
            print f.read()
        return False


def get_recent_pastes(options):
    params = json.dumps({'amount': options.amount})

    req = urllib2.Request(url=DPASTE_URL+'json/?method=pastes.getRecent', data=params, headers={'User-agent': USER_AGENT,'Content-Type': 'application/json'})
    if options.proxy:
        if options.debug:
            print >> sys.stderr, "Using proxy: %s" % options.proxy
        req.set_proxy(options.proxy, 'http')

    try:
        f = urllib2.urlopen(req)
    except urllib2.URLError, e: 
        if hasattr(e, 'reason'):
            print >> sys.stderr, "Error Uploading: %s" % e.reason
        elif hasattr(e, 'code'):
            print >> sys.stderr, "Server Error: %d - %s" % (e.code, e.msg)
            if options.debug:
                print f.read()
        return False

    url = json.loads(f.read())
    if url["error"] == None:
        print "%s most recent public pastes" % str(options.amount)
        print "%s%s%s%s%s" % ('#/*','-'*27,'snip','-'*27,'*\#')
        for data in url["data"]:
            print_paste(data)
            print "%s%s%s%s%s\n" % ('#\*','-'*27,'*snip*','-'*27,'*/#')
    else:
        print >> sys.stderr, "API Error: %s" % url["error"]
        if options.debug:
            print f.read()
        return False


def main():
    #language stats
    validSyntaxOpts = print_languages()
    validClipboardSelectionOpts = [ 'primary', 'secondary', 'clipboard' ]
    ext2lang_map = { 'sh':'bash', 'bash':'bash', 'bat':'bat', 'c':'c', 'h':'c', 'cpp':'cpp', 'css':'css', 'html':'html', 'htm':'html', 'ini':'ini', 'java':'java', 'js':'js', 'jsp':'jsp', 'Makefile':'make', 'pl':'perl', 'php':'php', 'php3':'php', 'py':'python', 'rb':'rb', 'rhtml':'rhtml', 'sql':'sql', 'sqlite':'sqlite3', 'tcl':'tcl', 'vim':'vim', 'xml':'xml' }
    deepdetect_map = {'bin/bash':'bash', 'bin/sh':'bash', 'python':'python', 'perl':'perl', 'ruby':'rb', '<!DOCTYPE':'html', '<?php':'php','bin/php':'php'}
    usage = """\
Usage: %%prog [OPTION]... [FILE]...
  send text file(s), stdin, or clipboard to the %s pastebin and return the URL.

Examples:
  %%prog file1.txt file2.txt
  dmesg | %%prog
  (prog1; prog2; prog3) | dpaste
  %%prog --sysinfo --confirm
  %%prog -l python foo.py""" % DPASTE_URL

    parser = OptionParser(usage=usage, version='%prog '+VERSION)
    parser.add_option('', '--debug', dest='debug', help=SUPPRESS_HELP, action="store_true", default=False)
    parser.add_option('', '--proxy', dest='proxy', help=SUPPRESS_HELP)

    # pastebin-specific options first
    dpasteOrg_group = OptionGroup(parser, "LodgeIt Options")
    dpasteOrg_group.add_option('', '--getlast', dest='getlast', help='get the last public paste', action="store_true", default=False)
    dpasteOrg_group.add_option('', '--getrecent', dest='getrecent', help='get the AMOUNT most recent public pastes', action="store_true", default=False)
    dpasteOrg_group.add_option('-n', '', dest='amount', help='set AMOUNT of most recent pastes to get; default is %default', metavar='AMOUNT')
    dpasteOrg_group.add_option('-l', dest='lang', help='language of content for syntax highlighting; default is "%default"', metavar='"LANGUAGE"')
    dpasteOrg_group.add_option('-L', '', dest='langlist', help='query server to show all ' + str(len(validSyntaxOpts)) + ' supported langs for LANGUAGE', action="store_true", default=False)
    dpasteOrg_group.add_option('-p', '--private', dest='private', help='paste as private', action="store_true", default=False)
    parser.add_option_group(dpasteOrg_group)
    # other options
    dpasteProg_group = OptionGroup(parser, "Input/Output Options")
    dpasteProg_group.add_option('-i', '--clipin', dest='clipin', help='read paste text from current X clipboard selection', action="store_true", default=False)
    dpasteProg_group.add_option('-o', '--clipout', dest='clipout', help='save returned paste URL to X clipboard', action="store_true", default=False)
    dpasteProg_group.add_option('', '--selection', dest='selection', help='specify which X clipboard to use. valid options: "primary" (default; middle-mouse-button paste), "secondary" (uncommon), or "clipboard" (ctrl-v paste)', metavar='CLIP')
    dpasteProg_group.add_option('', '--fullpath', dest='fullpath', help='use pathname VS basename for file description(s)', action="store_true", default=False)
    dpasteProg_group.add_option('', '--pasteself', dest='pasteself', help='paste this script itself', action="store_true", default=False)
    dpasteProg_group.add_option('', '--sysinfo', dest='sysinfo', help='paste system information', action="store_true", default=False)
    dpasteProg_group.add_option('', '--printonly', dest='printonly', help='print paste, but do not send', action="store_true", default=False)
    dpasteProg_group.add_option('', '--confirm', dest='confirm', help='print paste, and prompt for confirmation before sending', action="store_true", default=False)
    parser.add_option_group(dpasteProg_group)

    parser.set_defaults(lang='text', selection='primary', amount=5)
    (options, args) = parser.parse_args()

    if options.langlist:
        print >> sys.stderr, 'Supported Languages:\n'
        languages = print_languages(True)
        languages.sort(lambda a, b: cmp(a[1].lower(), b[1].lower()))
        for alias, name in print_languages(True):
            print '    %-30s%s' % (alias, name)
        sys.exit(0)

    if options.getlast:
        get_last_paste(options)
        sys.exit(0)
    
    if options.getrecent:
        get_recent_pastes(options)
        sys.exit(0)

    if options.clipin:
        if not os.access('/usr/bin/xsel', os.X_OK):
            # TODO: try falling back to xclip or dbus
            parser.error('OOPS - the clipboard options currently depend on "/usr/bin/xsel", which does not appear to be installed')
    if options.clipin and args:
        parser.error("Sending both clipboard contents AND files is not supported. Use -i OR filename(s)")
    for optk, optv, opts in [('language', options.lang, validSyntaxOpts), ('clipboard selection', options.selection, validClipboardSelectionOpts)]:
        if optv not in opts:
            parser.error("'%s' is not a valid %s option.\n\tVALID OPTIONS: %s" % (optv, optk, ', '.join(opts)))

    fileargs = args
    if options.fullpath:
        fileargs = [os.path.abspath(x) for x in args]
    else:
        fileargs = [os.path.basename(x) for x in args]  # remove potentially non-anonymous path info from file path descriptions

    #guess lang for some common file extensions, if all file exts similar, and lang not changed from default
    if options.lang == 'text':
        all_exts_similar = False
        for i in range(0, len(args)):
            all_exts_similar = True
            if os.path.splitext(args[i])[0] == "Makefile":
                ext = "Makefile"
            else:
                ext = os.path.splitext(args[i])[1].lstrip(os.extsep)
            if i > 0 and ext != ext_prev:
                all_exts_similar = False
                break
            ext_prev = ext
        if all_exts_similar and ext in ext2lang_map.keys():
            options.lang = ext2lang_map[ext]
        elif all_exts_similar and len(args) == 1:
            #attempt a deep detection by reading first line of text file for interpreter
            import re
            with open(args[0], 'r') as f:
                first_line = f.readline()
            for key in deepdetect_map.keys():
                if re.search(re.compile(key),first_line) != None:
                    options.lang = deepdetect_map[key]
                    break

    # get input from mutually exclusive sources, though they *could* be combined
    text = ""
    if options.clipin:
        xselcmd = 'xsel -o --%s' % options.selection
        #text = os.popen(xselcmd).read()
        p = subprocess.Popen(xselcmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (text, err) = p.communicate()
        if p.returncode != 0:
            if options.debug:
                print >> sys.stderr, err
            parser.error("'xsel' failure. this usually means you're not running X")
        if not text:
            parser.error("%s clipboard is empty" % options.selection)
    elif options.pasteself:
        text = open(sys.argv[0]).read()
        options.lang = 'python'
    elif options.sysinfo:
        text = sysinfo(options.debug)
    elif not args:   # read from stdin if no file args supplied
        try:
            text += sys.stdin.read()
        except KeyboardInterrupt:
            print >> sys.stderr, "\nUSAGE REMINDER:\n   dpaste waits for input when run without file arguments.\n   Paste your text, then press <Ctrl-D> on a new line to upload.\n   Try `dpaste --help' for more information.\nExiting..."
            sys.exit(1)
    else:
        for i, f in enumerate(args):
            if not os.access(f, os.R_OK):
                parser.error("file '%s' is not readable" % f)
            if (len(args) > 1):     # separate multiple files with header
                text += '#' * 78 + '\n'
                text += '### file %d of %d: %s\n' % (i+1, len(args), fileargs[i])
                text += '#' * 78 + '\n'
            text += open(f).read()

    if options.debug:
        print 'lang: "%s"' % options.lang
        print 'text (%d): "%s ..."' % (len(text), text[:80])

    if options.printonly or options.confirm:
        try:
            if is_text(text):
                print text   # when piped to less, sometimes fails with [Errno 32] Broken pipe
            else:
                print "DATA"
        except IOError:
            pass
    if options.printonly:   # print only what would be sent, and exit
        sys.exit(0)
    elif options.confirm:   # print what would be sent, and ask for permission
        if not confirm("OK to send?"):
            sys.exit(1)

    url = paste(text, options)
    if url:
        # try to save URL in clipboard, and warn but don't error
        if options.clipout:
            xselcmd = 'xsel -i --%s' % options.selection
            #os.popen(xselcmd, 'wb').write(url)
            p = subprocess.Popen(xselcmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
            (out, err) = p.communicate(input=url)
            if p.returncode != 0:
                if options.debug:
                    print >> sys.stderr, err
                #parser.error("'xsel' failure. this usually means you're not running X")
                print >> sys.stderr, "WARNING: URL not saved to clipboard"

        print url
    else:
        sys.exit(1)

    if options.pasteself:
        print >> sys.stderr, "install dpaste to local ~/bin dir by running:    mkdir -p ~/bin; curl " + url + "raw/ -o ~/bin/dpaste && chmod +x ~/bin/dpaste"

    sys.exit(0)


if __name__ == '__main__':
    try:
        if '--generate-man' in sys.argv:
            generate_man_page()
        else:
            #account for trailing slashes on url
            if DPASTE_URL[-1:] != '/':
                DPASTE_URL = DPASTE_URL + '/'
            main()
    except KeyboardInterrupt:
        print "\ninterrupted."
        sys.exit(1)
